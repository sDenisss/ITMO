package Lab_1_3;

import java.util.Random;

/*
Класс Набор
Набор домино
Содержит массив объектов класса Domino
При создании заполняет его 28-ю уникальными костями
Имеет метод для отображения набора на экран
Kit() - конструктор класса для задания значений набора
print() - вывести набор костей
*/
public class Kit {
    public Bone[] bones;
    /*
     * Конструктор создаёт массив из 28 элементов
     * и заполняет его уникальными костями
     * Kit() - конструктор класса для заданя значений набора
     * ничего не принимает
     * ничего не возвращает
     */

    public Kit() {
        this.bones = new Bone[28];
        for (int i = 0; i < 28; i++)
            bones[i] = new Bone(i);
    }

    /*
     * Отображает каждую кость в наборе
     * Отображаются в строку, затем переходит на новую строку
     */
    public void generationSequence(Sequence s) {
        Random random = new Random();
        for (int i = 0; i < bones.length;) {
            final int id = random.nextInt(0, 28);
            if (bones[id].getNext() < 0) { // Проверка, была ли кость добавлена в последовательность.
                s.add(bones[id]); // Добавление кости в последовательность
                i++;
            }
        }
    }
    /*
     * Принимая на вход пустую последовательность, мы добавляем в нее элементы,
     * выбирая случайным образом из заданного набора.
     * Для каждого выбранного элемента проверяем, есть ли у него следующий (next не
     * равен -1),
     * и если нет, то добавляем его в последовательность с его индексом (id).
     * Процесс повторяется,
     * пока количество добавленных элементов не достигнет общего числа элементов в
     * наборе
     */

    public Bone[] getBones() {
        return bones; // Возврат массива bones, содержащего все кости.
    }

    /*
     * печатает идентификаторы всех костей
     * print() - вывести набор костей
     * ничего не принимает
     * ничего не возвращает
     */
    // Вывести набор костей печатает идентификаторы всех костей.
    public void print() {
        for (int i = 0; i < bones.length; i++) {
            bones[i].print();
            System.out.print(' ');
        }
        System.out.println();
    }
}