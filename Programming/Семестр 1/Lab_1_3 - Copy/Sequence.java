package Lab_1_3;

//Класс Последовательность
/*
Последовательность объектов класса Sequence
Содержит индекс last элемента набора, который был добавлен в последовательность последним
cnt - текущее количество элементов в последовательности
Адрес kit набора на котором построена последовательность
Методы добавления, вынимания элементы,
Отображения последовательности на экран,
Проверку на пустоту,
Возвращение индекса первого элемента последовательности
И конструктор
*/
public class Sequence {
    public int last;
    public Bone[] bones;

    /*
     * Получает в качестве параметра набор, на который будет опираться
     * последовательность
     * Изначально последовательность создаётся пустая,
     * поэтому последним элементом обозначается -1
     * индекс, которого не может быть в массиве
     */
    public Sequence(Kit s) {
        this.bones = s.getBones();
        this.last = -1;
    }

    public int getLast() {
        return last;
    }

    /*
     * Добавляет кость b в конец последовательности. Если последовательность пуста,
     * новый элемент указывает сам на себя. Иначе предыдущий элемент ссылается на
     * новый, а новый становится последним.
     */
    public void add(Bone b) {
        if (last == -1) {
            System.out.println(b.getId());
            last = b.getId();
            System.out.println(b.getId());
            bones[last].setNext(last);
        } else {
            b.setNext(bones[last].getNext());
            bones[last].setNext(b.getId());
            last = b.getId();
        }
    }

    /*
     * Метод осуществляет вынимание из последовательности элемента, следующего за
     * текущим элементом.
     * Принимает два параметра: индекс текущего элемента (start) и порядковый номер
     * N вынимаемого элемента (n).
     * 
     * Циклически перемещается по последовательности, пропуская N элементов, чтобы
     * найти вынимаемый элемент.
     * Это достигается с помощью цикла, в котором на каждой итерации обновляется
     * индекс текущего элемента.
     * 
     * Когда вынимаемый элемент найден, его индекс (next) сохраняется, и текущий
     * элемент переподключается,
     * таким образом, что он "пропускает" вынимаемый элемент. Если вынимаемый
     * элемент был последним в последовательности,
     * значение last обновляется на индекс текущего элемента, делая его новым
     * последним элементом. Возвращает вынимаемый элемент.
     */
    public Bone removeBone(int start, int n) {
        for (int i = 0; i < n; i++) {
            start = bones[start].getNext();
        }
        int next = bones[start].getNext();
        bones[start].setNext(bones[next].getNext());
        if (next == last) {
            last = start;
        }
        bones[next].setNext(start);
        return bones[next];
    }

    /*
     * Вынимает из последовательности n-ый элемент, следующий за текущим элементом.
     * Принимает индекс текущего элемента (start) и порядковый номер N вынимаемого
     * элемента.
     * 
     * Для эффективности проходит по последовательности с учетом остатка от деления
     * N на количество элементов.
     * Когда вынимаемый элемент найден, обновляются связи в последовательности,
     * и если вынимаемый элемент был последним, значение last обновляется.
     * 
     * Возвращает вынимаемый элемент.
     */
    public Bone remove(int start, int n) {
        n -= 1;

        /*
         * Если в последовательности остался последний элемент,
         * он вынимается и в last записывается -1;
         */
        if (bones[last].getNext() == last) {
            int res = last;
            last = -1;
            bones[res].setNext(-1);
            return bones[res];
        }
        return removeBone(start, n);
    }

    /*
     * Метод выполняет удаление каждого N-го элемента в последовательности до тех
     * пор, пока последовательность не станет пустой.
     * В качестве параметров он принимает саму последовательность (seq) и порядковый
     * номер удаляемого элемента N.
     * В процессе выполнения метод выводит на печать каждый удаленный элемент и
     * текущее состояние последовательности без него
     */
    public static void remove(Sequence sequence, int N) {
        System.out.println("- - - - - - - - - - - - - - - - - - - - - - -");
        int current = sequence.getFirst();
        Bone bone;

        while (!sequence.isEmpty()) {
            System.out.print("Removed bone: ");
            bone = sequence.remove(current, N);
            bone.print();
            System.out.println();
            current = bone.getNext();
            sequence.print();
        }
    }

    // Проверяет, пуста ли последовательность
    public boolean isEmpty() {
        return last == -1;
    }

    // Возвращает индекс первого элемента последовательности
    public int getFirst() {
        return bones[last].getNext();
    }

    /*
     * Печатает последовательность в виде строки. Если последовательность пуста,
     * возвращает строку "[ ]".
     * В противном случае, формирует строку, начиная с первого элемента и заканчивая
     * последним.
     */
    public void print() {
        if (isEmpty())
            System.out.println("[ ]");
        else {
            int start = getFirst();
            while (start != last) {
                bones[start].print();
                start = bones[start].getNext();
            }
            bones[last].print();
            System.out.println();
        }
    }
}
